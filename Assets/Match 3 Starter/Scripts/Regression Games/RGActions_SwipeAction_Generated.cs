/// <auto-generated>
/// This file has been automatically generated. Do not modify.
/// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Newtonsoft.Json;
using RegressionGames;
using RegressionGames.StateActionTypes;
using UnityEngine;

public class RGActions_SwipeAction : IRGActions
{
    public static readonly Type BehaviourType = typeof(SwipeAction);
    public static readonly string EntityTypeName = "SwipeAction";
    public static readonly IDictionary<string, Delegate> ActionRequestDelegates = new ReadOnlyDictionary<string, Delegate>(new Dictionary<string, Delegate>()
    {{RGActionRequest_SwipeAction_Swipe.ActionName, new Action<GameObject, RGActionRequest>(RGAction_SwipeAction_Swipe.InvokeOnGameObject)}, });
}

public class RGActionRequest_SwipeAction_Swipe : RGActionRequest
{
    public RGActionRequest_SwipeAction_Swipe(int x1, int y1, int x2, int y2): base("Swipe")
    {
        Input["x1"] = x1;
        Input["y1"] = y1;
        Input["x2"] = x2;
        Input["y2"] = y2;
    }

    public static readonly string EntityTypeName = "SwipeAction";
    public static readonly string ActionName = "Swipe";
    public int x1 => (int)Input!["x1"];
    public int y1 => (int)Input!["y1"];
    public int x2 => (int)Input!["x2"];
    public int y2 => (int)Input!["y2"];
}

public class RGAction_SwipeAction_Swipe : IRGAction
{
    public static void InvokeOnGameObject(GameObject gameObject, RGActionRequest actionRequest)
    {
        // optimize this for local C# bots to avoid all the conversions/etc
        if (actionRequest is RGActionRequest_SwipeAction_Swipe myActionRequest)
        {
            InvokeOnGameObject(gameObject, myActionRequest.x1, myActionRequest.y1, myActionRequest.x2, myActionRequest.y2);
        }
        else
        {
            InvokeOnGameObject(gameObject, actionRequest.Input);
        }
    }

    private static void InvokeOnGameObject(GameObject gameObject, Dictionary<string, object> input)
    {
        int x1 = default;
        if (input.TryGetValue("x1", out var x1Input))
        {
            try
            {
                int.TryParse(x1Input.ToString(), out x1);
            }
            catch (Exception ex)
            {
                RGDebug.LogError($"Failed to parse 'x1' - {ex}");
            }
        }
        else
        {
            RGDebug.LogError("No parameter 'x1' found");
            return;
        }

        int y1 = default;
        if (input.TryGetValue("y1", out var y1Input))
        {
            try
            {
                int.TryParse(y1Input.ToString(), out y1);
            }
            catch (Exception ex)
            {
                RGDebug.LogError($"Failed to parse 'y1' - {ex}");
            }
        }
        else
        {
            RGDebug.LogError("No parameter 'y1' found");
            return;
        }

        int x2 = default;
        if (input.TryGetValue("x2", out var x2Input))
        {
            try
            {
                int.TryParse(x2Input.ToString(), out x2);
            }
            catch (Exception ex)
            {
                RGDebug.LogError($"Failed to parse 'x2' - {ex}");
            }
        }
        else
        {
            RGDebug.LogError("No parameter 'x2' found");
            return;
        }

        int y2 = default;
        if (input.TryGetValue("y2", out var y2Input))
        {
            try
            {
                int.TryParse(y2Input.ToString(), out y2);
            }
            catch (Exception ex)
            {
                RGDebug.LogError($"Failed to parse 'y2' - {ex}");
            }
        }
        else
        {
            RGDebug.LogError("No parameter 'y2' found");
            return;
        }

        InvokeOnGameObject(gameObject, x1, y1, x2, y2);
    }

    private static void InvokeOnGameObject(GameObject gameObject, params object[] args)
    {
        var monoBehaviour = gameObject.GetComponent<SwipeAction>();
        if (monoBehaviour == null)
        {
            //TODO (REG-1420): It would be nice if we could link them to the exact game object in the scene quickly.
            RGDebug.LogError($"Error: Regression Games internal error... Somehow RGAction: Swipe got registered on a GameObject where MonoBehaviour: SwipeAction does not exist.");
            return;
        }

        monoBehaviour.SwipeTilePositions((int)args[0], (int)args[1], (int)args[2], (int)args[3]);
    }
}

public static class RGSerialization_SwipeAction
{
}